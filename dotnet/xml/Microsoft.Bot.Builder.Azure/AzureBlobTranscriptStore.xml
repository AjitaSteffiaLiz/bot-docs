<Type Name="AzureBlobTranscriptStore" FullName="Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore">
  <TypeSignature Language="C#" Value="public class AzureBlobTranscriptStore : Microsoft.Bot.Builder.ITranscriptStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AzureBlobTranscriptStore extends System.Object implements class Microsoft.Bot.Builder.ITranscriptLogger, class Microsoft.Bot.Builder.ITranscriptStore" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" />
  <TypeSignature Language="VB.NET" Value="Public Class AzureBlobTranscriptStore&#xA;Implements ITranscriptStore" />
  <TypeSignature Language="F#" Value="type AzureBlobTranscriptStore = class&#xA;    interface ITranscriptStore&#xA;    interface ITranscriptLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
    <AssemblyVersion>4.0.0.46</AssemblyVersion>
    <AssemblyVersion>4.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Bot.Builder.ITranscriptStore</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The blob transcript store stores transcripts in an Azure Blob container.
            </summary>
    <remarks>
            Each activity is stored as json blob in structure of
            container/{channelId]/{conversationId}/{Timestamp.ticks}-{activity.id}.json.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AzureBlobTranscriptStore (Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string containerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string containerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storageAccount As CloudStorageAccount, containerName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore : Microsoft.WindowsAzure.Storage.CloudStorageAccount * string -&gt; Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" Usage="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore (storageAccount, containerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storageAccount" Type="Microsoft.WindowsAzure.Storage.CloudStorageAccount" />
        <Parameter Name="containerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storageAccount">Azure Storage Account to store transcripts.</param>
        <param name="containerName">Name of the continer where transcript blobs will be stored.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AzureBlobTranscriptStore (string dataConnectionString, string containerName);" FrameworkAlternate="botbuilder-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataConnectionString, string containerName) cil managed" FrameworkAlternate="botbuilder-dotnet-preview" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.#ctor(System.String,System.String)" FrameworkAlternate="botbuilder-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataConnectionString As String, containerName As String)" FrameworkAlternate="botbuilder-dotnet-preview" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore : string * string -&gt; Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" Usage="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore (dataConnectionString, containerName)" FrameworkAlternate="botbuilder-dotnet-preview" />
      <MemberSignature Language="C#" Value="public AzureBlobTranscriptStore (string dataConnectionstring, string containerName);" FrameworkAlternate="botbuilder-dotnet-stable" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataConnectionstring, string containerName) cil managed" FrameworkAlternate="botbuilder-dotnet-stable" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.#ctor(System.String,System.String)" FrameworkAlternate="botbuilder-dotnet-stable" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataConnectionstring As String, containerName As String)" FrameworkAlternate="botbuilder-dotnet-stable" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore : string * string -&gt; Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" Usage="new Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore (dataConnectionstring, containerName)" FrameworkAlternate="botbuilder-dotnet-stable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataConnectionString" Type="System.String" Index="0" FrameworkAlternate="botbuilder-dotnet-preview" />
        <Parameter Name="dataConnectionstring" Type="System.String" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
        <Parameter Name="containerName" Type="System.String" Index="1" />
      </Parameters>
      <Docs>
        <param name="dataConnectionString">Connection string to connect to Azure Blob Storage</param>
        <param name="dataConnectionstring">Connection string to connect to Azure Blob Storage.</param>
        <param name="containerName">Name of the continer where transcript blobs will be stored.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore" /> class.
            Creates an instance of AzureBlobTranscriptStore.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteTranscript">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteTranscript (string channelId, string conversationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteTranscript(string channelId, string conversationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.DeleteTranscript(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTranscript (channelId As String, conversationId As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteTranscript : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteTranscript : string * string -&gt; System.Threading.Tasks.Task" Usage="azureBlobTranscriptStore.DeleteTranscript (channelId, conversationId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.Core.Extensions.ITranscriptStore.DeleteTranscript(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="conversationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id where conversation took place.</param>
        <param name="conversationId">Id of the conversation to delete.</param>
        <summary>
            Delete a specific conversation and all of it's activities.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteTranscriptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteTranscriptAsync (string channelId, string conversationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteTranscriptAsync(string channelId, string conversationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.DeleteTranscriptAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTranscriptAsync (channelId As String, conversationId As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteTranscriptAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteTranscriptAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="azureBlobTranscriptStore.DeleteTranscriptAsync (channelId, conversationId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.ITranscriptStore.DeleteTranscriptAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="conversationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id where conversation took place.</param>
        <param name="conversationId">Id of the conversation to delete.</param>
        <summary>
            Delete a specific conversation and all of it's activities.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" />A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTranscriptActivities">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt; GetTranscriptActivities (string channelId, string conversationId, string continuationToken = null, DateTime startDate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Core.Extensions.PagedResult`1&lt;class Microsoft.Bot.Schema.IActivity&gt;&gt; GetTranscriptActivities(string channelId, string conversationId, string continuationToken, valuetype System.DateTime startDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.GetTranscriptActivities(System.String,System.String,System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTranscriptActivities (channelId As String, conversationId As String, Optional continuationToken As String = null, Optional startDate As DateTime = null) As Task(Of PagedResult(Of IActivity))" />
      <MemberSignature Language="F#" Value="abstract member GetTranscriptActivities : string * string * string * DateTime -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;&#xA;override this.GetTranscriptActivities : string * string * string * DateTime -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;" Usage="azureBlobTranscriptStore.GetTranscriptActivities (channelId, conversationId, continuationToken, startDate)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.Core.Extensions.ITranscriptStore.GetTranscriptActivities(System.String,System.String,System.String,System.DateTime)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="conversationId" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="startDate" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id.</param>
        <param name="conversationId">Conversation Id.</param>
        <param name="continuationToken">Continuatuation token to page through results.</param>
        <param name="startDate">Earliest time to include.</param>
        <summary>
            Get activities for a conversation (Aka the transcript)
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTranscriptActivitiesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt; GetTranscriptActivitiesAsync (string channelId, string conversationId, string continuationToken = null, DateTimeOffset startDate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.PagedResult`1&lt;class Microsoft.Bot.Schema.IActivity&gt;&gt; GetTranscriptActivitiesAsync(string channelId, string conversationId, string continuationToken, valuetype System.DateTimeOffset startDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTranscriptActivitiesAsync (channelId As String, conversationId As String, Optional continuationToken As String = null, Optional startDate As DateTimeOffset = null) As Task(Of PagedResult(Of IActivity))" />
      <MemberSignature Language="F#" Value="abstract member GetTranscriptActivitiesAsync : string * string * string * DateTimeOffset -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;&#xA;override this.GetTranscriptActivitiesAsync : string * string * string * DateTimeOffset -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;" Usage="azureBlobTranscriptStore.GetTranscriptActivitiesAsync (channelId, conversationId, continuationToken, startDate)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.ITranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Schema.IActivity&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="conversationId" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="startDate" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id.</param>
        <param name="conversationId">Conversation Id.</param>
        <param name="continuationToken">Continuatuation token to page through results.</param>
        <param name="startDate">Earliest time to include.</param>
        <summary>
            Get activities for a conversation (Aka the transcript).
            </summary>
        <returns>PagedResult of activities.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListTranscripts">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Builder.Core.Extensions.Transcript&gt;&gt; ListTranscripts (string channelId, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Core.Extensions.PagedResult`1&lt;class Microsoft.Bot.Builder.Core.Extensions.Transcript&gt;&gt; ListTranscripts(string channelId, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.ListTranscripts(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListTranscripts (channelId As String, Optional continuationToken As String = null) As Task(Of PagedResult(Of Transcript))" />
      <MemberSignature Language="F#" Value="abstract member ListTranscripts : string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Builder.Core.Extensions.Transcript&gt;&gt;&#xA;override this.ListTranscripts : string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Builder.Core.Extensions.Transcript&gt;&gt;" Usage="azureBlobTranscriptStore.ListTranscripts (channelId, continuationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.Core.Extensions.ITranscriptStore.ListTranscripts(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Core.Extensions.PagedResult&lt;Microsoft.Bot.Builder.Core.Extensions.Transcript&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id.</param>
        <param name="continuationToken">Continuatuation token to page through results.</param>
        <summary>
            List conversations in the channelId.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListTranscriptsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Builder.TranscriptInfo&gt;&gt; ListTranscriptsAsync (string channelId, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.PagedResult`1&lt;class Microsoft.Bot.Builder.TranscriptInfo&gt;&gt; ListTranscriptsAsync(string channelId, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.ListTranscriptsAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListTranscriptsAsync (channelId As String, Optional continuationToken As String = null) As Task(Of PagedResult(Of TranscriptInfo))" />
      <MemberSignature Language="F#" Value="abstract member ListTranscriptsAsync : string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Builder.TranscriptInfo&gt;&gt;&#xA;override this.ListTranscriptsAsync : string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Builder.TranscriptInfo&gt;&gt;" Usage="azureBlobTranscriptStore.ListTranscriptsAsync (channelId, continuationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.ITranscriptStore.ListTranscriptsAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.PagedResult&lt;Microsoft.Bot.Builder.TranscriptInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelId">Channel Id.</param>
        <param name="continuationToken">Continuatuation token to page through results.</param>
        <summary>
            List conversations in the channelId.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogActivity">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LogActivity (Microsoft.Bot.Schema.IActivity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task LogActivity(class Microsoft.Bot.Schema.IActivity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.LogActivity(Microsoft.Bot.Schema.IActivity)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogActivity (activity As IActivity) As Task" />
      <MemberSignature Language="F#" Value="abstract member LogActivity : Microsoft.Bot.Schema.IActivity -&gt; System.Threading.Tasks.Task&#xA;override this.LogActivity : Microsoft.Bot.Schema.IActivity -&gt; System.Threading.Tasks.Task" Usage="azureBlobTranscriptStore.LogActivity activity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.Core.Extensions.ITranscriptLogger.LogActivity(Microsoft.Bot.Schema.IActivity)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Microsoft.Bot.Schema.IActivity" />
      </Parameters>
      <Docs>
        <param name="activity">Activity being logged.</param>
        <summary>
            Log an activity to the transcript.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogActivityAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LogActivityAsync (Microsoft.Bot.Schema.IActivity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task LogActivityAsync(class Microsoft.Bot.Schema.IActivity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Azure.AzureBlobTranscriptStore.LogActivityAsync(Microsoft.Bot.Schema.IActivity)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogActivityAsync (activity As IActivity) As Task" />
      <MemberSignature Language="F#" Value="abstract member LogActivityAsync : Microsoft.Bot.Schema.IActivity -&gt; System.Threading.Tasks.Task&#xA;override this.LogActivityAsync : Microsoft.Bot.Schema.IActivity -&gt; System.Threading.Tasks.Task" Usage="azureBlobTranscriptStore.LogActivityAsync activity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.ITranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Azure</AssemblyName>
        <AssemblyVersion>4.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Microsoft.Bot.Schema.IActivity" />
      </Parameters>
      <Docs>
        <param name="activity">Activity being logged.</param>
        <summary>
            Log an activity to the transcript.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" />A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>