<Type Name="AnonymousReceiveMiddleware" FullName="Microsoft.Bot.Builder.AnonymousReceiveMiddleware">
  <TypeSignature Language="C#" Value="public class AnonymousReceiveMiddleware : Microsoft.Bot.Builder.IMiddleware" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnonymousReceiveMiddleware extends System.Object implements class Microsoft.Bot.Builder.IMiddleware" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.AnonymousReceiveMiddleware" />
  <TypeSignature Language="VB.NET" Value="Public Class AnonymousReceiveMiddleware&#xA;Implements IMiddleware" />
  <TypeSignature Language="F#" Value="type AnonymousReceiveMiddleware = class&#xA;    interface IMiddleware" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Core</AssemblyName>
    <AssemblyVersion>4.0.0.46</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Bot.Builder.IMiddleware</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Helper class for defining middleware by using a delegate or anonymous method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnonymousReceiveMiddleware (Func&lt;Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate,System.Threading.Tasks.Task&gt; anonymousMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`3&lt;class Microsoft.Bot.Builder.ITurnContext, class Microsoft.Bot.Builder.MiddlewareSet/NextDelegate, class System.Threading.Tasks.Task&gt; anonymousMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.AnonymousReceiveMiddleware.#ctor(System.Func{Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (anonymousMethod As Func(Of ITurnContext, MiddlewareSet.NextDelegate, Task))" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.AnonymousReceiveMiddleware : Func&lt;Microsoft.Bot.Builder.ITurnContext, Microsoft.Bot.Builder.MiddlewareSet.NextDelegate, System.Threading.Tasks.Task&gt; -&gt; Microsoft.Bot.Builder.AnonymousReceiveMiddleware" Usage="new Microsoft.Bot.Builder.AnonymousReceiveMiddleware anonymousMethod" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Core</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="anonymousMethod" Type="System.Func&lt;Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet+NextDelegate,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="anonymousMethod">The method to use as the middleware's process 
            request handler.</param>
        <summary>
            Creates a middleware object that uses the provided method as its
            process request handler.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTurn">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task OnTurn (Microsoft.Bot.Builder.ITurnContext context, Microsoft.Bot.Builder.MiddlewareSet.NextDelegate next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnTurn(class Microsoft.Bot.Builder.ITurnContext context, class Microsoft.Bot.Builder.MiddlewareSet/NextDelegate next) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.AnonymousReceiveMiddleware.OnTurn(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnTurn (context As ITurnContext, next As MiddlewareSet.NextDelegate) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnTurn : Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.MiddlewareSet.NextDelegate -&gt; System.Threading.Tasks.Task&#xA;override this.OnTurn : Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.MiddlewareSet.NextDelegate -&gt; System.Threading.Tasks.Task" Usage="anonymousReceiveMiddleware.OnTurn (context, next)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.IMiddleware.OnTurn(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Core</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="next" Type="Microsoft.Bot.Builder.MiddlewareSet+NextDelegate" />
      </Parameters>
      <Docs>
        <param name="context">The context object for this turn.</param>
        <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
        <summary>
            Uses the method provided in the <see cref="T:Microsoft.Bot.Builder.AnonymousReceiveMiddleware" /> to
            process an incoming activity.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>