<Type Name="CatchExceptionMiddleware&lt;T&gt;" FullName="Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class CatchExceptionMiddleware&lt;T&gt; : Microsoft.Bot.Builder.IMiddleware where T : Exception" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatchExceptionMiddleware`1&lt;(class System.Exception) T&gt; extends System.Object implements class Microsoft.Bot.Builder.IMiddleware" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware`1" />
  <TypeSignature Language="VB.NET" Value="Public Class CatchExceptionMiddleware(Of T)&#xA;Implements IMiddleware" />
  <TypeSignature Language="F#" Value="type CatchExceptionMiddleware&lt;'T (requires 'T :&gt; Exception)&gt; = class&#xA;    interface IMiddleware" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Core.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.46</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <BaseTypeName>System.Exception</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Bot.Builder.IMiddleware</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
            The type of the exception that you want to catch. This can be 'Exception' to
            catch all or a specific type of exception
            </typeparam>
    <summary>
            This piece of middleware can be added to allow you to handle exceptions when they are thrown
            within your bot's code or middleware further down the pipeline. Using this handler you might 
            send an appropriate message to the user to let them know that something has gone wrong.
            You can specify the type of exception the middleware should catch and this middleware can be added
            multiple times to allow you to handle different exception types in different ways.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatchExceptionMiddleware (Func&lt;Microsoft.Bot.Builder.ITurnContext,T,System.Threading.Tasks.Task&gt; callOnException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`3&lt;class Microsoft.Bot.Builder.ITurnContext, !T, class System.Threading.Tasks.Task&gt; callOnException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware`1.#ctor(System.Func{Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callOnException As Func(Of ITurnContext, T, Task))" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware&lt;'T (requires 'T :&gt; Exception)&gt; : Func&lt;Microsoft.Bot.Builder.ITurnContext, 'T, System.Threading.Tasks.Task (requires 'T :&gt; Exception)&gt; -&gt; Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware&lt;'T (requires 'T :&gt; Exception)&gt;" Usage="new Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware&lt;'T (requires 'T :&gt; System.Exception)&gt; callOnException" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Core.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callOnException" Type="System.Func&lt;Microsoft.Bot.Builder.ITurnContext,T,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="callOnException">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTurn">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task OnTurn (Microsoft.Bot.Builder.ITurnContext context, Microsoft.Bot.Builder.MiddlewareSet.NextDelegate next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnTurn(class Microsoft.Bot.Builder.ITurnContext context, class Microsoft.Bot.Builder.MiddlewareSet/NextDelegate next) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Core.Extensions.CatchExceptionMiddleware`1.OnTurn(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnTurn (context As ITurnContext, next As MiddlewareSet.NextDelegate) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnTurn : Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.MiddlewareSet.NextDelegate -&gt; System.Threading.Tasks.Task&#xA;override this.OnTurn : Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.MiddlewareSet.NextDelegate -&gt; System.Threading.Tasks.Task" Usage="catchExceptionMiddleware.OnTurn (context, next)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Builder.IMiddleware.OnTurn(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.MiddlewareSet.NextDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Core.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.46</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="next" Type="Microsoft.Bot.Builder.MiddlewareSet+NextDelegate" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="next">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>